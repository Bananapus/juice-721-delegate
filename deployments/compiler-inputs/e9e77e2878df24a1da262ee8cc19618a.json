{
	"solcVersion": "0.8.23",
	"solcLongVersion": "0.8.23+commit.f704f362",
	"id": "e9e77e2878df24a1da262ee8cc19618a",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": false,
			"optimizer": {
				"runs": 1000,
				"enabled": true
			},
			"metadata": {
				"useLiteralContent": false,
				"bytecodeHash": "ipfs",
				"appendCBOR": true
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"metadata",
						"storageLayout"
					]
				}
			},
			"evmVersion": "paris",
			"libraries": {},
			"remappings": [
				"@sphinx-labs/contracts/=node_modules/@sphinx-labs/contracts/contracts/foundry/",
				"@bananapus/=node_modules/@bananapus/",
				"@chainlink/=node_modules/@chainlink/",
				"@eth-optimism/=node_modules/@eth-optimism/",
				"@gnosis.pm/=node_modules/@gnosis.pm/",
				"@openzeppelin/=node_modules/@openzeppelin/",
				"@prb/=node_modules/@prb/",
				"@uniswap/=node_modules/@uniswap/",
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"hardhat/=node_modules/hardhat/",
				"solmate/=node_modules/solmate/",
				"sphinx-forge-std/=node_modules/sphinx-forge-std/",
				"sphinx-solmate/=node_modules/sphinx-solmate/",
				"sphinx/=lib/sphinx/packages/contracts/contracts/forge-std/src/"
			]
		},
		"sources": {
			"node_modules/@bananapus/address-registry/src/JBAddressRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.23;\n\nimport {IJBAddressRegistry} from \"./interfaces/IJBAddressRegistry.sol\";\n\n/// @notice This contract intended for registering deployers of Juicebox pay/redeem hooks, but does not enforce\n/// adherence to an interface, and can be used for any `create`/`create2` deployer. It is the deployer's responsibility\n/// to register their hook.\n/// @dev This registry is intended for client integration purposes. Hook addresses are computed based on the deployer's\n/// address and the nonce used to deploy the hook.\ncontract JBAddressRegistry is IJBAddressRegistry {\n    //*********************************************************************//\n    // --------------------- public stored properties -------------------- //\n    //*********************************************************************//\n\n    /// @notice Returns the deployer of a given contract, contingent on the deployer registering the deployment.\n    /// @custom:param addr The address of the contract to get the deployer of.\n    mapping(address addr => address deployer) public override deployerOf;\n\n    //*********************************************************************//\n    // -------------------------- constructor ---------------------------- //\n    //*********************************************************************//\n\n    constructor() {}\n\n    //*********************************************************************//\n    // ---------------------- external transactions ---------------------- //\n    //*********************************************************************//\n\n    /// @notice Add a contract address to the registry.\n    /// @dev The contract must be deployed using `create`.\n    /// @param deployer The address which deployed the contract.\n    /// @param nonce The nonce used to deploy the contract.\n    function registerAddress(address deployer, uint256 nonce) external override {\n        // Compute the contract's address, assuming `create1` deployed at the given nonce.\n        address hook = _addressFrom(deployer, nonce);\n\n        // Register the contract using the computed address.\n        _registerAddress(hook, deployer);\n    }\n\n    /// @notice Add a contract address to the registry.\n    /// @dev The contract must be deployed using `create2`.\n    /// @dev The `create2` salt is determined by the deployer's logic. The deployment bytecode can be retrieved offchain\n    /// (from the deployment transaction) or onchain (with `abi.encodePacked(type(deployedContract).creationCode,\n    /// abi.encode(constructorArguments))`).\n    /// @param deployer The address which deployed the contract.\n    /// @param salt The `create2` salt used to deploy the contract.\n    /// @param bytecode The contract's deployment bytecode, including the constructor arguments.\n    function registerAddress(address deployer, bytes32 salt, bytes calldata bytecode) external override {\n        // Compute the contract's address based on the `create2` salt and the deployment bytecode.\n        address hook =\n            address(uint160(uint256(keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, keccak256(bytecode))))));\n\n        // Register the contract using the computed address.\n        _registerAddress(hook, deployer);\n    }\n\n    //*********************************************************************//\n    // ---------------------- private transactions ----------------------- //\n    //*********************************************************************//\n\n    /// @notice Register a contract's address in the `deployerOf` mapping.\n    /// @param addr The deployed contract's address.\n    /// @param deployer The deployer address.\n    function _registerAddress(address addr, address deployer) private {\n        deployerOf[addr] = deployer;\n\n        emit AddressRegistered(addr, deployer);\n    }\n\n    /// @notice Compute the address of a contract deployed using `create1` based on the deployer's address and nonce.\n    /// @dev Taken from https://ethereum.stackexchange.com/a/87840/68134 - this won't work for nonces > 2**32. If\n    /// you reach that nonce please: 1) ping us, because wow 2) use another deployer.\n    /// @param origin The address of the deployer.\n    /// @param nonce The nonce used to deploy the contract.\n    function _addressFrom(address origin, uint256 nonce) internal pure returns (address addr) {\n        bytes memory data;\n        if (nonce == 0x00) {\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), origin, bytes1(0x80));\n        } else if (nonce <= 0x7f) {\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), origin, uint8(nonce));\n        } else if (nonce <= 0xff) {\n            data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), origin, bytes1(0x81), uint8(nonce));\n        } else if (nonce <= 0xffff) {\n            data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), origin, bytes1(0x82), uint16(nonce));\n        } else if (nonce <= 0xffffff) {\n            data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), origin, bytes1(0x83), uint24(nonce));\n        } else {\n            data = abi.encodePacked(bytes1(0xda), bytes1(0x94), origin, bytes1(0x84), uint32(nonce));\n        }\n        bytes32 hash = keccak256(data);\n        assembly {\n            mstore(0, hash)\n            addr := mload(0)\n        }\n    }\n}\n"
			},
			"node_modules/@bananapus/address-registry/src/interfaces/IJBAddressRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IJBAddressRegistry {\n    event AddressRegistered(address indexed addr, address indexed deployer);\n\n    function deployerOf(address addr) external view returns (address deployer);\n    function registerAddress(address deployer, uint256 nonce) external;\n    function registerAddress(address deployer, bytes32 salt, bytes calldata bytecode) external;\n}\n"
			}
		}
	}
}